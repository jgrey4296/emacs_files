* Base Agenda
  :LOGBOOK:
  CLOCK: [2019-02-08 Fri 20:33]--[2019-02-08 Fri 20:58] =>  0:25
  CLOCK: [2019-02-08 Fri 19:55]--[2019-02-08 Fri 20:20] =>  0:25
  CLOCK: [2019-02-08 Fri 19:21]--[2019-02-08 Fri 19:46] =>  0:25
  CLOCK: [2019-02-07 Thu 18:34]--[2019-02-07 Thu 18:59] =>  0:25
  CLOCK: [2019-02-07 Thu 16:41]--[2019-02-07 Thu 17:06] =>  0:25
  CLOCK: [2019-02-07 Thu 10:56]--[2019-02-07 Thu 11:21] =>  0:25
  CLOCK: [2019-02-06 Wed 09:57]--[2019-02-06 Wed 10:22] =>  0:25
  CLOCK: [2019-02-06 Wed 09:26]--[2019-02-06 Wed 09:51] =>  0:25
  CLOCK: [2019-02-06 Wed 08:58]--[2019-02-06 Wed 09:23] =>  0:25
  CLOCK: [2019-02-05 Tue 20:30]--[2019-02-05 Tue 20:55] =>  0:25
  CLOCK: [2019-02-05 Tue 19:39]--[2019-02-05 Tue 20:04] =>  0:25
  CLOCK: [2019-02-05 Tue 18:53]--[2019-02-05 Tue 19:18] =>  0:25
  CLOCK: [2019-02-05 Tue 18:19]--[2019-02-05 Tue 18:44] =>  0:25
  CLOCK: [2019-02-05 Tue 11:52]--[2019-02-05 Tue 12:17] =>  0:25
  CLOCK: [2019-02-05 Tue 11:19]--[2019-02-05 Tue 11:44] =>  0:25
  CLOCK: [2019-02-05 Tue 10:40]--[2019-02-05 Tue 11:05] =>  0:25
  CLOCK: [2019-02-05 Tue 10:07]--[2019-02-05 Tue 10:32] =>  0:25
  CLOCK: [2019-02-05 Tue 09:30]--[2019-02-05 Tue 09:55] =>  0:25
  CLOCK: [2019-02-04 Mon 15:17]--[2019-02-04 Mon 15:42] =>  0:25
  CLOCK: [2019-02-04 Mon 14:09]--[2019-02-04 Mon 14:34] =>  0:25
  :END:
**  [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Text.html#Text][emacs lisp text manipulation]]
** DONE [#A] Reply to Aaron
   CLOSED: [2019-02-18 Mon 02:11]
** TODO [[~/github/writing/paper_notes/index.org::*Summary%20Index][Summary Index]]
** [[~/github/languageLearning][Misc Language Repo]]                                                           :javascript:python:multiple_languages:lisp:supercollider:tidal:learning:notes:prolog:misc:

** -----------------------------------------------------------------------------
** Programming
*** TODO [[~/.spacemacs.d/layers/trie][Trie-layer]]

*** Javascript / Web
**** [[~/github/mordor-alike][Mordor Like Idea]]                                :nemesis:mordor:javascript:obsolete:incomplete:grammar:
**** TODO [[~/github/newspaper_gen][Newspaper Generator]]                       :javascript:generative:front_end:newspaper:web:procedural:
**** [[~/github/hexagonAITest][Hexagon Board / AI Test]]                        :front_end:incomplete:javascript:old:parsing:web:

*** Python
***** TODO [#A] [[~/github/documentUnitTester][Document Unit Tester]]                                            :writing:support:tool:test_driven_development:python:
****** setup a generator for org files
***** [[~/github/heuristicRBTreeWeighting][Heuristic Tree Weighting]]                                                  :obsolete:incomplete:old:python:
***** [[~/github/islandGen][Voronoi Island Gen]]                                                        :incomplete:python:image:
      integrate into pipeline
***** TODO [#A] [[~/github/cairoCity][Cairo City Generator]]                                            :cairo:graphical:image:generative:front_end:layers:city:python:
****** DONE [#A] integrate with cairo_pipeline
       CLOSED: [2019-02-10 Sun 13:16]
****** TODO [#B] line -> street and space algorithm
****** TODO Return to [[file:~/github/cairoCity/citygen/City.py::class%20City:][<Cairo City>]]
***** TODO [[~/github/cairo_pipeline][Cairo Pipeline Architecture]]                                          :cairo:graphical:active:layers:python:
***** [[~/github/cairo_utils][Cairo Utilities]]                                                           :graphical:active:dcel:voronoi:cairo:library:tool:
***** [[~/github/nytimes_scraper][NYT Scraper]]                                                               :data_analysis:grammar:scraper:dataset:nytimes:
***** TODO [#C] [[~/github/pyAStar][Python Astar Implementation]]                                     :library:pathfinding:maze:astar:python:
****** integrate into pythonRuleEngine?
       needs to be able to control vault movement as well
***** TODO [#A] [[~/github/pythonRuleEngine][Python Rule Language and Engine]]                                 :python:important:todo:meta:simulation:institutions:exclusion_logic:library:parsing:production_system:rules:
****** Recap current language capabilities
****** integrate layer architecture
****** implement type checking?
****** implement time?
****** TODO [#A] implement meta?
       up and down shifts, possibly links with layers? look at reflective papers again
****** implement other form of rule change?

*** TODO Prolog                                                                 :todo:programming:institutions:ASP:tutorial:
**** continue with prolog tutorial
**** return to ASP
**** look at Bath Institutional ASP
*** TODO Unity                                                                  :needs_assets:game:vault:programming:unity:
**** proof of concept imports in vault
*** TODO Supercollider / Tidal                                                  :needs_assets:sound:supercollider:tidal:
**** proof of concept soundscape controllable from python
**** look at acropolis API to get samples/assets
**** Action languages
     C+ as well
**** TODO [#A] soundscape assets
***** TODO [#A] [[https://bbcarchdev.github.io/inside-acropolis/#consumers][Acropolis API]]
      [[http://bbcsfx.acropolis.org.uk/index][BBC Sound FX Library]]
      [[bbcsfx.acropolis.org.uk/][BBC sound effects frontend]]
*** TODO Haskell                                                                :monads:theory:programming:haskell:
**** look at implementation of monad transformers
*** To Clean
**** [[~/github/dotaScraper][~/github/dotaScraper]]                                                       :obsolete:old:
**** [[~/github/emacsModeExample][~/github/emacsModeExample]]                                                  :obsolete:old:incomplete:
**** [[~/github/happiton][~/github/happiton]]                                                          :obsolete:incomplete:javascript:
**** [[~/github/cairoSine][~/github/cairoSine]]                                                         :cairo:obsolete:incomplete:old:graphical:image:


** TODO [#B] Datasets
   To add: don't startve, and other games
   SFAM, Quests, Changelogs?, speech acts , NYT, Social Physics Datasets
*** [[~/github/jg-SpaceBase-DF9][~/github/jg-SpaceBase-DF9]]                                                   :simulation:lua:to_analyse:codebase:game:
*** TODO [[~/Mega/Datasets][~/Mega/Datasets]]
**** go through, find whats useful
*** TODO [#A] NYT
**** try using title trie grammars
**** [[~/Mega/Images/glitch-assets][~/Mega/Images/glitch-assets]]
     possibly use these in vault?
**** [[~/Mega/bookmarks][~/Mega/bookmarks]]
     treat these as codings?
**** [[http://realitycommons.media.mit.edu/realitymining.html][Reality Mining]]
*** TODO [#B] Versu dataset
**** parse the code?

*** TODO horus heresy dataset
** TODO [#A] Annotations / Examples
*** TODO [#A] Snatch delegation
    to lead to delegation in iEl
*** TODO collate lists of sources
    to prepare for annotation,
    to give components of expressive generators

** TODO [#C] [[~/Mega/savedTwitter][Saved Twitter Threads]]
** -----------------------------------------------------------------------------
** Writing

** TODO [[file:~/github/writing/orgfiles/dissertation.org::*Dissertation][Dissertation]]                                                            :dissertation:writing:important:
** [[~/github/jgrey4296.github.io][jgrey4296.github.io]]                                                          :writing:important:todo:target:blog:web:
*** [[~/github/jsons][jsons representations]]                                                       :json:writing:
*** [[~/github/writing][misc writing]]                                                                :writing:generic:

** TODO [#C] Mendeley organisation
*** [[/Volumes/DOCUMENTS/mendeley][Mendeley]]
** -----------------------------------------------------------------------------
** Misc
*** [[~/github/jg_emacs_files][Emacs files]]                                    :lisp:setup:emacs:
*** [[~/github/jg_shell_files][Bash Scripts]]                                   :bash:setup:
*** Emacs / Spacemacs
**** TODO [#A] Twittering mode image upload extension
     add this as a set of custom functions, post-extending the twitter layer
***** DONE extend twittering-edit-mode-map to insert a media id
      CLOSED: [2019-02-07 Thu 13:00]
      need to specify a file to upload. how? helm
***** write function for inserting media id into buffer
      store media ids as local variables to the tweet buffer
******* TODO write verify function
        check size of image/gif/video
        check format
        [[file:~/.spacemacs.d/layers/jg_layer/funcs.el::(defun%20jg_layer/twitter-open-and-encode-picture%20(candidate)][<no description>]]

******* extend twittering-call-api-with-account-in-api1.1                       :obsolete:
******* extend twittering-http-post                                             :obsolete:
        making sure to change the host to the upload target
        then method to init then append then finalize
        loading the specified file into a temporary buffer,
        then encoding as base64, getting size, chunking
        and sending.

        sentinel passed will be a continuation to send next chunk
        or repeat current, or finalize if no more chunks.
        (this will need the base64 encoded temp buffer accessible
        or stored in a variable. which?
***** have twittering-edit-post-status detect media ids
      retrieve the buffer local variable of media ids
      add to options passed to twittering-call-api
***** [[https://developer.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-init][Twitter api]]
**** TODO Org SubTree Transient State navigation
**** TODO [#C] Org Table Transient state
**** TODO [#C] org-agenda keymap modifications
     swap priority mods into < and >
**** TODO Write a Helm view for tagging in Org
**** TODO XML / Bookmarks load

**** TODO tag and colourize words minor mode to run anywhere
     be able to tag and colourize things dynamically, based on what you need at
     any given moment
     then be able to tag into groups?
** TODO Run Summarize Directory Script on datasets/papers/other
   [[file:~/github/jg_shell_files/summariseDirectory.py::"""][<summariseDirectory.py>]]


** TODO Prototype some Mechanical Turk Tasks


* Progressed
** iELPY
*** Parser
*** Runtime

** Newspaper Gen
*** DONE Tracery
    <2017-03-24 Fri>
    Add tracery in for straight away text gen
    ** Shell
*** Preact UI
    <2017-03-27 Mon>
*** Shell Runtime
**** DONE Test searching
     <2017-03-23 Thu>
**** Rule Mode
     <2017-03-25 Sat>
**** FSM Mode
     <2017-03-25 Sat>
*** Rete
**** Write actual logic tests
     <2017-03-26 Sun>
** Behaviour Tree.js
*** Exclusion Logic
    <2017-03-26 Sun>
    Union of EL.js and iELPy language, to use in both
** Writing
*** DONE Jekyll TAGS
    <2017-03-23 Thu>
*** Unit Testing
**** First document: An Overview
     <2017-03-27 Mon>
** Prototypes
   <2017-03-28 Tue>
*** Hex Board -> Preact
*** Battle System
*** Credit System
*** Mordor - alike
*** Prisoners dilemma
*** NetLogo
*** Unity
**** Animation
** Data Analysis
   <2017-03-28 Tue>
*** Game Scraping

*** Web Scraping
**** Dota
**** WoW
** Reading
*** Books
    <2017-03-29 Wed>
**** Scott
     <2017-03-26 Sun>
**** Bicchieri
**** Graeber
**** North
**** Ostrom
*** Dagstuhl
*** Dissertations
*** Papers
** DONE Haskell
   <2017-03-24 Fri>
   Write a simple parser using parsec
*** Haskell: add a python version of iEL
    <2017-03-30 Thu>
** DONE Python Red-Black Weighting
   <2017-03-28 Tue>



