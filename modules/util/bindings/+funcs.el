;;; util/bindings/+funcs.el -*- lexical-binding: t; -*-

(defun +jg-bindings-goto-org-agenda-file ()
  (interactive)
  (let ((agenda (car org-agenda-files)))
    (find-file agenda)
    )
  )
(defun +jg-bindings-goto-messages ()
  (interactive)
  (switch-to-buffer "*Messages*")
  )
(defun +jg-bindings-goto-home ()
  (interactive)
  (find-file "~")
  )
(defun +jg-bindings-goto-resources ()
  (interactive)
  (find-file "~/github/writing/resources")
  )
(defun +jg-bindings-goto-desktop ()
  (interactive)
  (find-file "~/Desktop")
  )
(defun +jg-bindings-goto-github ()
  (interactive)
  (find-file "~/github")
  )
(defun +jg-bindings-goto-mega ()
  (interactive)
  (find-file "~/mega")
  )
(defun +jg-bindings-open-link ()
  (interactive)
  (cond ((eq evil-state 'visual)
         (let ((str (buffer-substring-no-properties evil-visual-beginning evil-visual-end)))
           (org-open-link-from-string (format "[[%s]]" (string-trim str)))
           ))
        (t (org-open-at-point 'in-emacs))
        )
  )
(defun +jg-bindings-open-link-externally ()
  (interactive)
  (let ((current-prefix-arg '(16))
        (str (if (eq evil-state 'visual) (buffer-substring-no-properties evil-visual-beginning evil-visual-end) nil))
        )
    (cond ((eq evil-state 'visual)
           (funcall-interactively 'org-open-link-from-string (format "[[%s]]" (string-trim str))))
          ((eq 'link (org-element-type (org-element-context)))
           (call-interactively 'org-open-at-point))
          (t
           (funcall-interactively 'org-open-link-from-string
                                  (format "[[%s]]" (string-trim (buffer-substring-no-properties (line-beginning-position)
                                                                                                (line-end-position))))))
          )
    )
  )

(defun +jg-bindings-clear-buffer ()
  """ Utility to clear a buffer
    from https://stackoverflow.com/questions/24565068/ """
  (interactive)
  (let ((inhibit-read-only t)) (erase-buffer))
  )

(defun +jg-personal-insert-lparen ()
  """ utility to insert a (  """
  (interactive)
  (insert "(")
  )
(defun +jg-personal-insert-rparen ()
  """ utility to insert a ) """
  (interactive)
  (insert ")")
  )
